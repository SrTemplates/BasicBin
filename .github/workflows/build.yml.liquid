name: Build and deploy

permissions:
  contents: write

env:
  APP_NAME: {{crate_name}}

{% raw -%}
on:
  push:
    paths-ignore:
      - ".github/workflows/**.yml"
      - "**/Makefile.toml"
      - "release.toml"
      - "LICENS**"
      - "README.md"
    tags:
      - "**"

jobs:
  ci:
    uses: ./.github/workflows/ci.yml

  # Run 'cargo dist plan' to determine what tasks we need to do
  plan:
    needs: ci
    runs-on: ubuntu-latest
    outputs:
      val: ${{ steps.plan.outputs.manifest }}
      tag: ${{ !github.event.pull_request && github.ref_name || '' }}
      tag-flag: ${{ !github.event.pull_request && format('--tag={0}', github.ref_name) || '' }}
      publishing: ${{ !github.event.pull_request }}
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - uses: dsherret/rust-toolchain-file@v1
      - uses: Swatinem/rust-cache@v2
      - name: Load .env file
        uses: xom9ikk/dotenv@v2

      - name: Install cargo-dist
        run: "curl --proto '=https' --tlsv1.2 -LsSf https://github.com/axodotdev/cargo-dist/releases/download/v0.4.0-prerelease.3/cargo-dist-installer.sh | sh"
      - id: plan
        run: |
          cargo dist plan ${{ !github.event.pull_request && format('--tag={0}', github.ref_name) || '' }} --output-format=json > dist-manifest.json
          echo "cargo dist plan ran successfully"
          cat dist-manifest.json
          echo "manifest=$(jq -c "." dist-manifest.json)" >> "$GITHUB_OUTPUT"
      - name: "Upload dist-manifest.json"
        uses: actions/upload-artifact@v3
        with:
          name: artifacts
          path: dist-manifest.json

  # Build and packages all the platform-specific things
  upload-local-artifacts:
    # Let the initial task tell us to not run (currently very blunt)
    needs: plan
    if: ${{ fromJson(needs.plan.outputs.val).releases != null && (needs.plan.outputs.publishing == 'true' || fromJson(needs.plan.outputs.val).ci.github.pr_run_mode == 'upload') }}
    strategy:
      fail-fast: false
      # Target platforms/runners are computed by cargo-dist in create-release.
      # Each member of the matrix has the following arguments:
      #
      # - runner: the github runner
      # - dist-args: cli flags to pass to cargo dist
      # - install-dist: expression to run to install cargo-dist on the runner
      #
      # Typically there will be:
      # - 1 "global" task that builds universal installers
      # - N "local" tasks that build each platform's binaries and platform-specific installers
      matrix: ${{ fromJson(needs.plan.outputs.val).ci.github.artifacts_matrix }}
    runs-on: ${{ matrix.runner }}
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      BUILD_MANIFEST_NAME: target/distrib/${{ join(matrix.targets, '-') }}-dist-manifest.json
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - uses: swatinem/rust-cache@v2
      - name: Install cargo-dist
        run: ${{ matrix.install_dist }}
      - name: Install dependencies
        run: |
          ${{ matrix.packages_install }}
      - name: Build artifacts
        run: |
          # Actually do builds and make zips and whatnot
          cargo dist build ${{ needs.plan.outputs.tag-flag }} --print=linkage --output-format=json ${{ matrix.dist_args }} > dist-manifest.json
          echo "cargo dist ran successfully"
      - id: cargo-dist
        name: Post-build
        # We force bash here just because github makes it really hard to get values up
        # to "real" actions without writing to env-vars, and writing to env-vars has
        # inconsistent syntax between shell and powershell.
        shell: bash
        run: |
          # Parse out what we just built and upload it to the Github Release™
          echo "paths<<EOF" >> "$GITHUB_OUTPUT"
          jq --raw-output ".artifacts[]?.path | select( . != null )" dist-manifest.json >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"

          cp dist-manifest.json "$BUILD_MANIFEST_NAME"
      - name: "Upload artifacts"
        uses: actions/upload-artifact@v3
        with:
          name: artifacts
          path: |
            ${{ steps.cargo-dist.outputs.paths }}
            ${{ env.BUILD_MANIFEST_NAME }}

  # Build and package all the platform-agnostic(ish) things
  upload-global-artifacts:
    needs: [plan, upload-local-artifacts]
    runs-on: "ubuntu-20.04"
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Install cargo-dist
        run: "curl --proto '=https' --tlsv1.2 -LsSf https://github.com/axodotdev/cargo-dist/releases/download/v0.4.0-prerelease.3/cargo-dist-installer.sh | sh"
      # Get all the local artifacts for the global tasks to use (for e.g. checksums)
      - name: Fetch local artifacts
        uses: actions/download-artifact@v3
        with:
          name: artifacts
          path: target/distrib/
      - id: cargo-dist
        shell: bash
        run: |
          cargo dist build ${{ needs.plan.outputs.tag-flag }} --output-format=json "--artifacts=global" > dist-manifest.json
          echo "cargo dist ran successfully"

          # Parse out what we just built and upload it to the Github Release™
          echo "paths<<EOF" >> "$GITHUB_OUTPUT"
          jq --raw-output ".artifacts[]?.path | select( . != null )" dist-manifest.json >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"
      - name: "Upload artifacts"
        uses: actions/upload-artifact@v3
        with:
          name: artifacts
          path: ${{ steps.cargo-dist.outputs.paths }}

  should-publish:
    needs:
      - plan
      - upload-local-artifacts
      - upload-global-artifacts
    if: ${{ needs.plan.outputs.publishing == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: print tag
        run: echo "ok we're publishing!"

  publish-homebrew-formula:
    needs: [plan, should-publish]
    runs-on: "ubuntu-20.04"
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      PLAN: ${{ needs.plan.outputs.val }}
      GITHUB_USER: "axo bot"
      GITHUB_EMAIL: "admin+bot@axo.dev"
    if: ${{ !fromJson(needs.plan.outputs.val).announcement_is_prerelease || fromJson(needs.plan.outputs.val).publish_prereleases }}
    steps:
      - uses: actions/checkout@v4
        with:
          repository: "axodotdev/homebrew-tap"
          token: ${{ secrets.HOMEBREW_TAP_TOKEN }}
      # So we have access to the formula
      - name: Fetch local artifacts
        uses: actions/download-artifact@v3
        with:
          name: artifacts
          path: Formula/
      - name: Commit formula files
        run: |
          git config --global user.name "${GITHUB_USER}"
          git config --global user.email "${GITHUB_EMAIL}"

          for release in $(echo "$PLAN" | jq --compact-output '.releases[]'); do
            name=$(echo "$release" | jq .app_name --raw-output)
            version=$(echo "$release" | jq .app_version --raw-output)

            git add Formula/${name}.rb
            git commit -m "${name} ${version}"
          done
          git push

  # Create a Github Release with all the results once everything is done
  publish-release:
    needs: [plan, should-publish]
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: "Download artifacts"
        uses: actions/download-artifact@v3
        with:
          name: artifacts
          path: artifacts
      - name: Cleanup
        run: |
          # Remove the granular manifests
          rm artifacts/*-dist-manifest.json
      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ needs.plan.outputs.tag }}
          name: ${{ fromJson(needs.plan.outputs.val).announcement_title }}
          body: ${{ fromJson(needs.plan.outputs.val).announcement_github_body }}
          prerelease: ${{ fromJson(needs.plan.outputs.val).announcement_is_prerelease }}
          artifacts: "artifacts/*"

{% endraw %}
{% if deploy_release %}
{% raw %}
      - name: Release | Upload
        uses: softprops/action-gh-release@v1
        with:
          files: ${{ env.APP_NAME }}-${{ matrix.name }}
          prerelease: ${{ contains(github.ref_name, 'a') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
{% endraw %}
{% endif %}
